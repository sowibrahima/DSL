/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.browser.Affectation
import org.xtext.example.browser.CheckContains
import org.xtext.example.browser.Click
import org.xtext.example.browser.Declaration
import org.xtext.example.browser.Get
import org.xtext.example.browser.Insert
import org.xtext.example.browser.Program
import org.xtext.example.browser.FindElements
import org.xtext.example.browser.Read
import org.xtext.example.browser.Type
import org.xtext.example.browser.Variable
import org.xtext.example.browser.VarReference

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BrowserGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		 
		for (program : resource.allContents.toIterable.filter(Program)) {
			fsa.generateFile(program.name + ".java", program.compile)
        }       
        
    }
    
    def dispatch label(Program p) { 
     	p.set.toFirstUpper()
   	}
    
    def compile(Program p) '''
        
        import org.openqa.selenium.By;
        import org.openqa.selenium.Keys;
        import org.openqa.selenium.WebDriver;
        import org.openqa.selenium.WebElement;
        import org.openqa.selenium.«p.set».«p.set.toFirstUpper()»Driver;
        
        public class «p.name» {
        	public static void main(String[] args){
        		WebDriver driver = new «p.set.toFirstUpper()»Driver();
        		«FOR l : p.lines»
        		«l.compileFunc»
				«ENDFOR»
        	}
        }
    	'''
    
	def dispatch compileFunc(Declaration declaration) '''
    	«declaration.type.compileType» «declaration.variable.compileVariable»;
    	'''
    	
    def compileType(Type type) '''«type.type»'''
    
    def compileVariable(Variable variable) '''«variable.name»'''
    
    def compileVarReference(VarReference ref) '''«ref.value.compileVariable»'''
    	
	def dispatch compileFunc(Affectation affectation) '''
    	«affectation.variable.compileVarReference» = «affectation.expr»;
    	'''
    	
    def dispatch compileFunc(Get get) '''
    	driver.get(«IF get.variable !== null»«get.variable.compileVarReference»«ELSE»"«get.param»"«ENDIF»);
    	'''
  	
  	def dispatch compileFunc(CheckContains contains) '''
    	driver.findElement(By.«contains.attribute»(«IF contains.variable !== null»«contains.variable.compileVarReference»«ELSE»"«contains.param»"«ENDIF»));	    
    	'''
  	
  	def dispatch compileFunc(FindElements elem) '''
    	driver.findElements(By.«elem.option»(«IF elem.variable !== null»«elem.variable.compileVarReference»«ELSE»"«elem.param»"«ENDIF»))«elem.method.compileMethod»
    	'''
    	
  	def dispatch compileFunc(Read read) '''
  		«read.variable.compileVarReference» = driver.findElements(By.«read.option»(«IF read.param1 !== null»«read.param1.compileVarReference»«ELSE»"«read.param2»"«ENDIF»)).get(«read.position»).getAttribute("«read.attribute»");
    	'''
    	
   	def dispatch compileMethod(Click click) '''
    	.get(«click.position»).click();
    	'''
    	
    def dispatch compileMethod(Insert insert) '''
    	.get(«insert.position»).insert(«IF insert.ref !== null»«insert.ref.compileVarReference»«ELSE»"«insert.param»"«ENDIF»);
    	'''
    
}
