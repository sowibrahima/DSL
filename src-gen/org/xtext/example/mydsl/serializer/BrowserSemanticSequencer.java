/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.browser.Affectation;
import org.xtext.example.mydsl.browser.BrowserPackage;
import org.xtext.example.mydsl.browser.Button;
import org.xtext.example.mydsl.browser.CheckCheckbox;
import org.xtext.example.mydsl.browser.Checkbox;
import org.xtext.example.mydsl.browser.ClearCheckbox;
import org.xtext.example.mydsl.browser.Click;
import org.xtext.example.mydsl.browser.Combobox;
import org.xtext.example.mydsl.browser.Contains;
import org.xtext.example.mydsl.browser.Declaration;
import org.xtext.example.mydsl.browser.FindProperty;
import org.xtext.example.mydsl.browser.Go;
import org.xtext.example.mydsl.browser.Image;
import org.xtext.example.mydsl.browser.Input;
import org.xtext.example.mydsl.browser.Insert;
import org.xtext.example.mydsl.browser.Link;
import org.xtext.example.mydsl.browser.Program;
import org.xtext.example.mydsl.browser.STRING;
import org.xtext.example.mydsl.browser.SelectCombobox;
import org.xtext.example.mydsl.browser.Text;
import org.xtext.example.mydsl.browser.Type;
import org.xtext.example.mydsl.browser.VarReference;
import org.xtext.example.mydsl.browser.Variable;
import org.xtext.example.mydsl.browser.WebElementVarReference;
import org.xtext.example.mydsl.services.BrowserGrammarAccess;

@SuppressWarnings("all")
public class BrowserSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BrowserGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BrowserPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BrowserPackage.AFFECTATION:
				sequence_Affectation(context, (Affectation) semanticObject); 
				return; 
			case BrowserPackage.BUTTON:
				sequence_Button(context, (Button) semanticObject); 
				return; 
			case BrowserPackage.CHECK_CHECKBOX:
				sequence_CheckCheckbox(context, (CheckCheckbox) semanticObject); 
				return; 
			case BrowserPackage.CHECKBOX:
				sequence_Checkbox(context, (Checkbox) semanticObject); 
				return; 
			case BrowserPackage.CLEAR_CHECKBOX:
				sequence_ClearCheckbox(context, (ClearCheckbox) semanticObject); 
				return; 
			case BrowserPackage.CLICK:
				sequence_Click(context, (Click) semanticObject); 
				return; 
			case BrowserPackage.COMBOBOX:
				sequence_Combobox(context, (Combobox) semanticObject); 
				return; 
			case BrowserPackage.CONTAINS:
				sequence_Contains(context, (Contains) semanticObject); 
				return; 
			case BrowserPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case BrowserPackage.FIND_PROPERTY:
				sequence_FindProperty(context, (FindProperty) semanticObject); 
				return; 
			case BrowserPackage.GO:
				sequence_Go(context, (Go) semanticObject); 
				return; 
			case BrowserPackage.IMAGE:
				sequence_Image(context, (Image) semanticObject); 
				return; 
			case BrowserPackage.INPUT:
				sequence_Input(context, (Input) semanticObject); 
				return; 
			case BrowserPackage.INSERT:
				sequence_Insert(context, (Insert) semanticObject); 
				return; 
			case BrowserPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case BrowserPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case BrowserPackage.STRING:
				sequence_GetTitle(context, (STRING) semanticObject); 
				return; 
			case BrowserPackage.SELECT_COMBOBOX:
				sequence_SelectCombobox(context, (SelectCombobox) semanticObject); 
				return; 
			case BrowserPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			case BrowserPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case BrowserPackage.VAR_REFERENCE:
				sequence_VarReference(context, (VarReference) semanticObject); 
				return; 
			case BrowserPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case BrowserPackage.WEB_ELEMENT_VAR_REFERENCE:
				if (rule == grammarAccess.getLinesRule()) {
					sequence_FindFirstProperty_FindSecondProperty(context, (WebElementVarReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFindFirstPropertyRule()) {
					sequence_FindFirstProperty(context, (WebElementVarReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFindSecondPropertyRule()) {
					sequence_FindSecondProperty(context, (WebElementVarReference) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Lines returns Affectation
	 *     Affectation returns Affectation
	 *
	 * Constraint:
	 *     (ref=VarReference expr=Expression)
	 */
	protected void sequence_Affectation(ISerializationContext context, Affectation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.AFFECTATION__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.AFFECTATION__REF));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.AFFECTATION__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.AFFECTATION__EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAffectationAccess().getRefVarReferenceParserRuleCall_0_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getAffectationAccess().getExprExpressionParserRuleCall_2_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Button
	 *     WebElementType returns Button
	 *     Button returns Button
	 *
	 * Constraint:
	 *     (name=STRING value=WebElementVarReference class=STRING)
	 */
	protected void sequence_Button(ISerializationContext context, Button semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.BUTTON__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.BUTTON__NAME));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.BUTTON__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.BUTTON__VALUE));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getButtonAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getButtonAccess().getValueWebElementVarReferenceParserRuleCall_2_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getButtonAccess().getClassSTRINGTerminalRuleCall_3_0(), semanticObject.getClass_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lines returns CheckCheckbox
	 *     FunctionCall returns CheckCheckbox
	 *     Interractions returns CheckCheckbox
	 *     CheckCheckbox returns CheckCheckbox
	 *
	 * Constraint:
	 *     val=WebElementVarReference
	 */
	protected void sequence_CheckCheckbox(ISerializationContext context, CheckCheckbox semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.CHECK_CHECKBOX__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.CHECK_CHECKBOX__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheckCheckboxAccess().getValWebElementVarReferenceParserRuleCall_0_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Checkbox
	 *     WebElementType returns Checkbox
	 *     Checkbox returns Checkbox
	 *
	 * Constraint:
	 *     (name=STRING value=ListValue class=STRING)
	 */
	protected void sequence_Checkbox(ISerializationContext context, Checkbox semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.CHECKBOX__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.CHECKBOX__NAME));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.CHECKBOX__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.CHECKBOX__VALUE));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheckboxAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCheckboxAccess().getValueListValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getCheckboxAccess().getClassSTRINGTerminalRuleCall_3_0(), semanticObject.getClass_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lines returns ClearCheckbox
	 *     FunctionCall returns ClearCheckbox
	 *     Interractions returns ClearCheckbox
	 *     ClearCheckbox returns ClearCheckbox
	 *
	 * Constraint:
	 *     val=WebDriverVarReference
	 */
	protected void sequence_ClearCheckbox(ISerializationContext context, ClearCheckbox semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.CLEAR_CHECKBOX__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.CLEAR_CHECKBOX__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClearCheckboxAccess().getValWebDriverVarReferenceParserRuleCall_0_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lines returns Click
	 *     FunctionCall returns Click
	 *     Interractions returns Click
	 *     Click returns Click
	 *
	 * Constraint:
	 *     val=WebElementVarReference
	 */
	protected void sequence_Click(ISerializationContext context, Click semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.CLICK__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.CLICK__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClickAccess().getValWebElementVarReferenceParserRuleCall_0_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Combobox
	 *     WebElementType returns Combobox
	 *     Combobox returns Combobox
	 *
	 * Constraint:
	 *     (name=STRING value=ListValue class=STRING)
	 */
	protected void sequence_Combobox(ISerializationContext context, Combobox semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.COMBOBOX__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.COMBOBOX__NAME));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.COMBOBOX__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.COMBOBOX__VALUE));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComboboxAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getComboboxAccess().getValueListValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getComboboxAccess().getClassSTRINGTerminalRuleCall_3_0(), semanticObject.getClass_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lines returns Contains
	 *     FunctionCall returns Contains
	 *     Contains returns Contains
	 *
	 * Constraint:
	 *     (val=WebElementVarReference param=STRING)
	 */
	protected void sequence_Contains(ISerializationContext context, Contains semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.CONTAINS__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.CONTAINS__VAL));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.CONTAINS__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.CONTAINS__PARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainsAccess().getValWebElementVarReferenceParserRuleCall_0_0(), semanticObject.getVal());
		feeder.accept(grammarAccess.getContainsAccess().getParamSTRINGTerminalRuleCall_2_0(), semanticObject.getParam());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lines returns Declaration
	 *     Declaration returns Declaration
	 *
	 * Constraint:
	 *     (type=Type var=Variable)
	 */
	protected void sequence_Declaration(ISerializationContext context, Declaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.DECLARATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.DECLARATION__TYPE));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.DECLARATION__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.DECLARATION__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDeclarationAccess().getVarVariableParserRuleCall_1_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lines returns WebElementVarReference
	 *
	 * Constraint:
	 *     ((val=WebDriverVarReference name=ID param=STRING) | (val=WebDriverVarReference name=ID param=STRING))
	 */
	protected void sequence_FindFirstProperty_FindSecondProperty(ISerializationContext context, WebElementVarReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FindFirstProperty returns WebElementVarReference
	 *
	 * Constraint:
	 *     (val=WebDriverVarReference name=ID param=STRING)
	 */
	protected void sequence_FindFirstProperty(ISerializationContext context, WebElementVarReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__VAL));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__NAME));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__PARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFindFirstPropertyAccess().getValWebDriverVarReferenceParserRuleCall_0_0(), semanticObject.getVal());
		feeder.accept(grammarAccess.getFindFirstPropertyAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFindFirstPropertyAccess().getParamSTRINGTerminalRuleCall_4_0(), semanticObject.getParam());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lines returns FindProperty
	 *     FindProperty returns FindProperty
	 *
	 * Constraint:
	 *     (val=WebDriverVarReference name=ID param=STRING)
	 */
	protected void sequence_FindProperty(ISerializationContext context, FindProperty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.FIND_PROPERTY__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.FIND_PROPERTY__VAL));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.FIND_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.FIND_PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.FIND_PROPERTY__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.FIND_PROPERTY__PARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFindPropertyAccess().getValWebDriverVarReferenceParserRuleCall_0_0(), semanticObject.getVal());
		feeder.accept(grammarAccess.getFindPropertyAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFindPropertyAccess().getParamSTRINGTerminalRuleCall_4_0(), semanticObject.getParam());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FindSecondProperty returns WebElementVarReference
	 *
	 * Constraint:
	 *     (val=WebDriverVarReference name=ID param=STRING)
	 */
	protected void sequence_FindSecondProperty(ISerializationContext context, WebElementVarReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__VAL));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__NAME));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__PARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFindSecondPropertyAccess().getValWebDriverVarReferenceParserRuleCall_0_0(), semanticObject.getVal());
		feeder.accept(grammarAccess.getFindSecondPropertyAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFindSecondPropertyAccess().getParamSTRINGTerminalRuleCall_4_0(), semanticObject.getParam());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lines returns STRING
	 *     GetTitle returns STRING
	 *
	 * Constraint:
	 *     val=WebElementVarReference
	 */
	protected void sequence_GetTitle(ISerializationContext context, STRING semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.STRING__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.STRING__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGetTitleAccess().getValWebElementVarReferenceParserRuleCall_0_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lines returns Go
	 *     FunctionCall returns Go
	 *     Go returns Go
	 *
	 * Constraint:
	 *     (val=WebDriverVarReference url=STRING)
	 */
	protected void sequence_Go(ISerializationContext context, Go semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.GO__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.GO__VAL));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.GO__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.GO__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoAccess().getValWebDriverVarReferenceParserRuleCall_0_0(), semanticObject.getVal());
		feeder.accept(grammarAccess.getGoAccess().getUrlSTRINGTerminalRuleCall_2_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Image
	 *     WebElementType returns Image
	 *     Image returns Image
	 *
	 * Constraint:
	 *     (value=WebElementVarReference class=STRING)
	 */
	protected void sequence_Image(ISerializationContext context, Image semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.IMAGE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.IMAGE__VALUE));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImageAccess().getValueWebElementVarReferenceParserRuleCall_1_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getImageAccess().getClassSTRINGTerminalRuleCall_2_0(), semanticObject.getClass_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Input
	 *     WebElementType returns Input
	 *     Input returns Input
	 *
	 * Constraint:
	 *     (name=STRING value=STRING type=STRING class=STRING)
	 */
	protected void sequence_Input(ISerializationContext context, Input semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.INPUT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.INPUT__NAME));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.INPUT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.INPUT__VALUE));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.INPUT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.INPUT__TYPE));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInputAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInputAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getInputAccess().getTypeSTRINGTerminalRuleCall_3_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getInputAccess().getClassSTRINGTerminalRuleCall_4_0(), semanticObject.getClass_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lines returns Insert
	 *     FunctionCall returns Insert
	 *     Interractions returns Insert
	 *     Insert returns Insert
	 *
	 * Constraint:
	 *     (val=WebElementVarReference name=ID)
	 */
	protected void sequence_Insert(ISerializationContext context, Insert semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.INSERT__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.INSERT__VAL));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.INSERT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.INSERT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInsertAccess().getValWebElementVarReferenceParserRuleCall_0_0(), semanticObject.getVal());
		feeder.accept(grammarAccess.getInsertAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Link
	 *     WebElementType returns Link
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=STRING url=STRING class=STRING)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.LINK__NAME));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.LINK__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.LINK__URL));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLinkAccess().getUrlSTRINGTerminalRuleCall_2_0(), semanticObject.getUrl());
		feeder.accept(grammarAccess.getLinkAccess().getClassSTRINGTerminalRuleCall_3_0(), semanticObject.getClass_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     lines+=Lines+
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Lines returns SelectCombobox
	 *     FunctionCall returns SelectCombobox
	 *     Interractions returns SelectCombobox
	 *     SelectCombobox returns SelectCombobox
	 *
	 * Constraint:
	 *     (val=WebElementVarReference param=STRING)
	 */
	protected void sequence_SelectCombobox(ISerializationContext context, SelectCombobox semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.SELECT_COMBOBOX__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.SELECT_COMBOBOX__VAL));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.SELECT_COMBOBOX__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.SELECT_COMBOBOX__PARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSelectComboboxAccess().getValWebElementVarReferenceParserRuleCall_0_0(), semanticObject.getVal());
		feeder.accept(grammarAccess.getSelectComboboxAccess().getParamSTRINGTerminalRuleCall_2_0(), semanticObject.getParam());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Text
	 *     WebElementType returns Text
	 *     Text returns Text
	 *
	 * Constraint:
	 *     (name=STRING value=WebElementVarReference class=STRING)
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.TEXT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.TEXT__NAME));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.TEXT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.TEXT__VALUE));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_TYPE__CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTextAccess().getValueWebElementVarReferenceParserRuleCall_2_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getTextAccess().getClassSTRINGTerminalRuleCall_3_0(), semanticObject.getClass_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     (type='WebDriver' | type='WebElement' | type='String')
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarReference returns VarReference
	 *     WebElementVarReference returns VarReference
	 *     WebDriverVarReference returns VarReference
	 *
	 * Constraint:
	 *     val=[Variable|ID]
	 */
	protected void sequence_VarReference(ISerializationContext context, VarReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.WEB_ELEMENT_VAR_REFERENCE__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarReferenceAccess().getValVariableIDTerminalRuleCall_0_1(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
