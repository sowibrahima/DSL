/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.browser.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.browser.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BrowserFactoryImpl extends EFactoryImpl implements BrowserFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BrowserFactory init()
  {
    try
    {
      BrowserFactory theBrowserFactory = (BrowserFactory)EPackage.Registry.INSTANCE.getEFactory(BrowserPackage.eNS_URI);
      if (theBrowserFactory != null)
      {
        return theBrowserFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BrowserFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrowserFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BrowserPackage.PROGRAM: return createProgram();
      case BrowserPackage.LINES: return createLines();
      case BrowserPackage.FUNCTION_CALL: return createFunctionCall();
      case BrowserPackage.DECLARATION: return createDeclaration();
      case BrowserPackage.TYPE: return createType();
      case BrowserPackage.AFFECTATION: return createAffectation();
      case BrowserPackage.EXPRESSION: return createExpression();
      case BrowserPackage.VAR_REFERENCE: return createVarReference();
      case BrowserPackage.WEB_ELEMENT_VAR_REFERENCE: return createWebElementVarReference();
      case BrowserPackage.WEB_DRIVER_VAR_REFERENCE: return createWebDriverVarReference();
      case BrowserPackage.VARIABLE: return createVariable();
      case BrowserPackage.WEB_ELEMENT_TYPE: return createWebElementType();
      case BrowserPackage.LINK: return createLink();
      case BrowserPackage.INPUT: return createInput();
      case BrowserPackage.BUTTON: return createButton();
      case BrowserPackage.TEXT: return createText();
      case BrowserPackage.CHECKBOX: return createCheckbox();
      case BrowserPackage.COMBOBOX: return createCombobox();
      case BrowserPackage.IMAGE: return createImage();
      case BrowserPackage.GO: return createGo();
      case BrowserPackage.CONTAINS: return createContains();
      case BrowserPackage.INTERRACTIONS: return createInterractions();
      case BrowserPackage.CLICK: return createClick();
      case BrowserPackage.FIND_PROPERTY: return createFindProperty();
      case BrowserPackage.STRING: return createSTRING();
      case BrowserPackage.INSERT: return createInsert();
      case BrowserPackage.CHECK_CHECKBOX: return createCheckCheckbox();
      case BrowserPackage.CLEAR_CHECKBOX: return createClearCheckbox();
      case BrowserPackage.SELECT_COMBOBOX: return createSelectCombobox();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lines createLines()
  {
    LinesImpl lines = new LinesImpl();
    return lines;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCall createFunctionCall()
  {
    FunctionCallImpl functionCall = new FunctionCallImpl();
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declaration createDeclaration()
  {
    DeclarationImpl declaration = new DeclarationImpl();
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Affectation createAffectation()
  {
    AffectationImpl affectation = new AffectationImpl();
    return affectation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarReference createVarReference()
  {
    VarReferenceImpl varReference = new VarReferenceImpl();
    return varReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WebElementVarReference createWebElementVarReference()
  {
    WebElementVarReferenceImpl webElementVarReference = new WebElementVarReferenceImpl();
    return webElementVarReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WebDriverVarReference createWebDriverVarReference()
  {
    WebDriverVarReferenceImpl webDriverVarReference = new WebDriverVarReferenceImpl();
    return webDriverVarReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WebElementType createWebElementType()
  {
    WebElementTypeImpl webElementType = new WebElementTypeImpl();
    return webElementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Link createLink()
  {
    LinkImpl link = new LinkImpl();
    return link;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Input createInput()
  {
    InputImpl input = new InputImpl();
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Button createButton()
  {
    ButtonImpl button = new ButtonImpl();
    return button;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Text createText()
  {
    TextImpl text = new TextImpl();
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Checkbox createCheckbox()
  {
    CheckboxImpl checkbox = new CheckboxImpl();
    return checkbox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Combobox createCombobox()
  {
    ComboboxImpl combobox = new ComboboxImpl();
    return combobox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Image createImage()
  {
    ImageImpl image = new ImageImpl();
    return image;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Go createGo()
  {
    GoImpl go = new GoImpl();
    return go;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contains createContains()
  {
    ContainsImpl contains = new ContainsImpl();
    return contains;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interractions createInterractions()
  {
    InterractionsImpl interractions = new InterractionsImpl();
    return interractions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Click createClick()
  {
    ClickImpl click = new ClickImpl();
    return click;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FindProperty createFindProperty()
  {
    FindPropertyImpl findProperty = new FindPropertyImpl();
    return findProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STRING createSTRING()
  {
    STRINGImpl string = new STRINGImpl();
    return string;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Insert createInsert()
  {
    InsertImpl insert = new InsertImpl();
    return insert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CheckCheckbox createCheckCheckbox()
  {
    CheckCheckboxImpl checkCheckbox = new CheckCheckboxImpl();
    return checkCheckbox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClearCheckbox createClearCheckbox()
  {
    ClearCheckboxImpl clearCheckbox = new ClearCheckboxImpl();
    return clearCheckbox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectCombobox createSelectCombobox()
  {
    SelectComboboxImpl selectCombobox = new SelectComboboxImpl();
    return selectCombobox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BrowserPackage getBrowserPackage()
  {
    return (BrowserPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BrowserPackage getPackage()
  {
    return BrowserPackage.eINSTANCE;
  }

} //BrowserFactoryImpl
