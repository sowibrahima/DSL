/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BrowserGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Program");
		private final Assignment cLinesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLinesLinesParserRuleCall_0 = (RuleCall)cLinesAssignment.eContents().get(0);
		
		//Program:
		//	lines+=Lines*;
		@Override public ParserRule getRule() { return rule; }
		
		//lines+=Lines*
		public Assignment getLinesAssignment() { return cLinesAssignment; }
		
		//Lines
		public RuleCall getLinesLinesParserRuleCall_0() { return cLinesLinesParserRuleCall_0; }
	}
	public class LinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Lines");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAffectationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCheckContainsLinkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCheckContainsTextParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFindPropertyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFindFirstPropertyParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFindSecondPropertyParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cGetTitleParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Lines:
		//	Declaration | Affectation | FunctionCall | CheckContainsLink | CheckContainsText | FindProperty | FindFirstProperty |
		//	FindSecondProperty | GetTitle;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | Affectation | FunctionCall | CheckContainsLink | CheckContainsText | FindProperty | FindFirstProperty |
		//FindSecondProperty | GetTitle
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//Affectation
		public RuleCall getAffectationParserRuleCall_1() { return cAffectationParserRuleCall_1; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_2() { return cFunctionCallParserRuleCall_2; }
		
		//CheckContainsLink
		public RuleCall getCheckContainsLinkParserRuleCall_3() { return cCheckContainsLinkParserRuleCall_3; }
		
		//CheckContainsText
		public RuleCall getCheckContainsTextParserRuleCall_4() { return cCheckContainsTextParserRuleCall_4; }
		
		//FindProperty
		public RuleCall getFindPropertyParserRuleCall_5() { return cFindPropertyParserRuleCall_5; }
		
		//FindFirstProperty
		public RuleCall getFindFirstPropertyParserRuleCall_6() { return cFindFirstPropertyParserRuleCall_6; }
		
		//FindSecondProperty
		public RuleCall getFindSecondPropertyParserRuleCall_7() { return cFindSecondPropertyParserRuleCall_7; }
		
		//GetTitle
		public RuleCall getGetTitleParserRuleCall_8() { return cGetTitleParserRuleCall_8; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVariableParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Declaration:
		//	type=Type var=Variable ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type var=Variable ';'
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//var=Variable
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_1_0() { return cVarVariableParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Type");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeWebDriverKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeWebElementKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeStringKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		
		//Type:
		//	type=('WebDriver' | 'WebElement' | 'String');
		@Override public ParserRule getRule() { return rule; }
		
		//type=('WebDriver' | 'WebElement' | 'String')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('WebDriver' | 'WebElement' | 'String')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'WebDriver'
		public Keyword getTypeWebDriverKeyword_0_0() { return cTypeWebDriverKeyword_0_0; }
		
		//'WebElement'
		public Keyword getTypeWebElementKeyword_0_1() { return cTypeWebElementKeyword_0_1; }
		
		//'String'
		public Keyword getTypeStringKeyword_0_2() { return cTypeStringKeyword_0_2; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cURLTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//	name=ID | URL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID | URL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//URL
		public RuleCall getURLTerminalRuleCall_1() { return cURLTerminalRuleCall_1; }
	}
	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Affectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefVarReferenceParserRuleCall_0_0 = (RuleCall)cRefAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Affectation:
		//	ref=VarReference '=' expr=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//ref=VarReference '=' expr=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//ref=VarReference
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//VarReference
		public RuleCall getRefVarReferenceParserRuleCall_0_0() { return cRefVarReferenceParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VarReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.VarReference");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValVariableCrossReference_0 = (CrossReference)cValAssignment.eContents().get(0);
		private final RuleCall cValVariableIDTerminalRuleCall_0_1 = (RuleCall)cValVariableCrossReference_0.eContents().get(1);
		
		//VarReference:
		//	val=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//val=[Variable]
		public Assignment getValAssignment() { return cValAssignment; }
		
		//[Variable]
		public CrossReference getValVariableCrossReference_0() { return cValVariableCrossReference_0; }
		
		//ID
		public RuleCall getValVariableIDTerminalRuleCall_0_1() { return cValVariableIDTerminalRuleCall_0_1; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.FunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContainsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterractionsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FunctionCall:
		//	Go | Contains | Interractions;
		@Override public ParserRule getRule() { return rule; }
		
		//Go | Contains | Interractions
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Go
		public RuleCall getGoParserRuleCall_0() { return cGoParserRuleCall_0; }
		
		//Contains
		public RuleCall getContainsParserRuleCall_1() { return cContainsParserRuleCall_1; }
		
		//Interractions
		public RuleCall getInterractionsParserRuleCall_2() { return cInterractionsParserRuleCall_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWebDriverTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWebElementTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cURLTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression:
		//	WebDriverType | WebElementType | STRING | URL;
		@Override public ParserRule getRule() { return rule; }
		
		//WebDriverType | WebElementType | STRING | URL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WebDriverType
		public RuleCall getWebDriverTypeParserRuleCall_0() { return cWebDriverTypeParserRuleCall_0; }
		
		//WebElementType
		public RuleCall getWebElementTypeParserRuleCall_1() { return cWebElementTypeParserRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//URL
		public RuleCall getURLTerminalRuleCall_3() { return cURLTerminalRuleCall_3; }
	}
	public class WebDriverTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.WebDriverType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFirefoxDriverKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cChromeDriverKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInternetExplorerDriverKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//WebDriverType:
		//	'FirefoxDriver' | 'ChromeDriver' | 'InternetExplorerDriver';
		@Override public ParserRule getRule() { return rule; }
		
		//'FirefoxDriver' | 'ChromeDriver' | 'InternetExplorerDriver'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'FirefoxDriver'
		public Keyword getFirefoxDriverKeyword_0() { return cFirefoxDriverKeyword_0; }
		
		//'ChromeDriver'
		public Keyword getChromeDriverKeyword_1() { return cChromeDriverKeyword_1; }
		
		//'InternetExplorerDriver'
		public Keyword getInternetExplorerDriverKeyword_2() { return cInternetExplorerDriverKeyword_2; }
	}
	public class WebElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.WebElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCheckboxParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cComboboxParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cImageParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//WebElementType:
		//	Link | Input | Button | Text | Checkbox | Combobox | Image;
		@Override public ParserRule getRule() { return rule; }
		
		//Link | Input | Button | Text | Checkbox | Combobox | Image
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Link
		public RuleCall getLinkParserRuleCall_0() { return cLinkParserRuleCall_0; }
		
		//Input
		public RuleCall getInputParserRuleCall_1() { return cInputParserRuleCall_1; }
		
		//Button
		public RuleCall getButtonParserRuleCall_2() { return cButtonParserRuleCall_2; }
		
		//Text
		public RuleCall getTextParserRuleCall_3() { return cTextParserRuleCall_3; }
		
		//Checkbox
		public RuleCall getCheckboxParserRuleCall_4() { return cCheckboxParserRuleCall_4; }
		
		//Combobox
		public RuleCall getComboboxParserRuleCall_5() { return cComboboxParserRuleCall_5; }
		
		//Image
		public RuleCall getImageParserRuleCall_6() { return cImageParserRuleCall_6; }
	}
	public class WebElementVarReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.WebElementVarReference");
		private final RuleCall cVarReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//WebElementVarReference:
		//	VarReference;
		@Override public ParserRule getRule() { return rule; }
		
		//VarReference
		public RuleCall getVarReferenceParserRuleCall() { return cVarReferenceParserRuleCall; }
	}
	public class WebDriverVarReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.WebDriverVarReference");
		private final RuleCall cVarReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//WebDriverVarReference:
		//	VarReference;
		@Override public ParserRule getRule() { return rule; }
		
		//VarReference
		public RuleCall getVarReferenceParserRuleCall() { return cVarReferenceParserRuleCall; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		private final Assignment cClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassSTRINGTerminalRuleCall_3_0 = (RuleCall)cClassAssignment_3.eContents().get(0);
		
		//Link:
		//	'link' name=STRING url=STRING class=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'link' name=STRING url=STRING class=STRING
		public Group getGroup() { return cGroup; }
		
		//'link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//url=STRING
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0() { return cUrlSTRINGTerminalRuleCall_2_0; }
		
		//class=STRING
		public Assignment getClassAssignment_3() { return cClassAssignment_3; }
		
		//STRING
		public RuleCall getClassSTRINGTerminalRuleCall_3_0() { return cClassSTRINGTerminalRuleCall_3_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeSTRINGTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cClassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassSTRINGTerminalRuleCall_4_0 = (RuleCall)cClassAssignment_4.eContents().get(0);
		
		//Input:
		//	'input' name=STRING value=STRING type=STRING class=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'input' name=STRING value=STRING type=STRING class=STRING
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
		
		//type=STRING
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_3_0() { return cTypeSTRINGTerminalRuleCall_3_0; }
		
		//class=STRING
		public Assignment getClassAssignment_4() { return cClassAssignment_4; }
		
		//STRING
		public RuleCall getClassSTRINGTerminalRuleCall_4_0() { return cClassSTRINGTerminalRuleCall_4_0; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueWebElementVarReferenceParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassSTRINGTerminalRuleCall_3_0 = (RuleCall)cClassAssignment_3.eContents().get(0);
		
		//Button:
		//	'button' name=STRING value=WebElementVarReference class=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'button' name=STRING value=WebElementVarReference class=STRING
		public Group getGroup() { return cGroup; }
		
		//'button'
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//value=WebElementVarReference
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//WebElementVarReference
		public RuleCall getValueWebElementVarReferenceParserRuleCall_2_0() { return cValueWebElementVarReferenceParserRuleCall_2_0; }
		
		//class=STRING
		public Assignment getClassAssignment_3() { return cClassAssignment_3; }
		
		//STRING
		public RuleCall getClassSTRINGTerminalRuleCall_3_0() { return cClassSTRINGTerminalRuleCall_3_0; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueWebElementVarReferenceParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassSTRINGTerminalRuleCall_3_0 = (RuleCall)cClassAssignment_3.eContents().get(0);
		
		//Text:
		//	'text' name=STRING value=WebElementVarReference class=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'text' name=STRING value=WebElementVarReference class=STRING
		public Group getGroup() { return cGroup; }
		
		//'text'
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//value=WebElementVarReference
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//WebElementVarReference
		public RuleCall getValueWebElementVarReferenceParserRuleCall_2_0() { return cValueWebElementVarReferenceParserRuleCall_2_0; }
		
		//class=STRING
		public Assignment getClassAssignment_3() { return cClassAssignment_3; }
		
		//STRING
		public RuleCall getClassSTRINGTerminalRuleCall_3_0() { return cClassSTRINGTerminalRuleCall_3_0; }
	}
	public class CheckboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Checkbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueListValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassSTRINGTerminalRuleCall_3_0 = (RuleCall)cClassAssignment_3.eContents().get(0);
		
		//Checkbox:
		//	'checkbox' name=STRING value=ListValue class=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'checkbox' name=STRING value=ListValue class=STRING
		public Group getGroup() { return cGroup; }
		
		//'checkbox'
		public Keyword getCheckboxKeyword_0() { return cCheckboxKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//value=ListValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ListValue
		public RuleCall getValueListValueParserRuleCall_2_0() { return cValueListValueParserRuleCall_2_0; }
		
		//class=STRING
		public Assignment getClassAssignment_3() { return cClassAssignment_3; }
		
		//STRING
		public RuleCall getClassSTRINGTerminalRuleCall_3_0() { return cClassSTRINGTerminalRuleCall_3_0; }
	}
	public class ComboboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Combobox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComboboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueListValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassSTRINGTerminalRuleCall_3_0 = (RuleCall)cClassAssignment_3.eContents().get(0);
		
		//Combobox:
		//	'combobox' name=STRING value=ListValue class=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'combobox' name=STRING value=ListValue class=STRING
		public Group getGroup() { return cGroup; }
		
		//'combobox'
		public Keyword getComboboxKeyword_0() { return cComboboxKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//value=ListValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ListValue
		public RuleCall getValueListValueParserRuleCall_2_0() { return cValueListValueParserRuleCall_2_0; }
		
		//class=STRING
		public Assignment getClassAssignment_3() { return cClassAssignment_3; }
		
		//STRING
		public RuleCall getClassSTRINGTerminalRuleCall_3_0() { return cClassSTRINGTerminalRuleCall_3_0; }
	}
	public class ListValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.ListValue");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ListValue:
		//	STRING*;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING*
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueWebElementVarReferenceParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassSTRINGTerminalRuleCall_2_0 = (RuleCall)cClassAssignment_2.eContents().get(0);
		
		//Image:
		//	'image' value=WebElementVarReference class=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'image' value=WebElementVarReference class=STRING
		public Group getGroup() { return cGroup; }
		
		//'image'
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }
		
		//value=WebElementVarReference
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//WebElementVarReference
		public RuleCall getValueWebElementVarReferenceParserRuleCall_1_0() { return cValueWebElementVarReferenceParserRuleCall_1_0; }
		
		//class=STRING
		public Assignment getClassAssignment_2() { return cClassAssignment_2; }
		
		//STRING
		public RuleCall getClassSTRINGTerminalRuleCall_2_0() { return cClassSTRINGTerminalRuleCall_2_0; }
	}
	public class GoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Go");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValWebDriverVarReferenceParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Keyword cGetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Go:
		//	val=WebDriverVarReference '.get(' url=STRING ');';
		@Override public ParserRule getRule() { return rule; }
		
		//val=WebDriverVarReference '.get(' url=STRING ');'
		public Group getGroup() { return cGroup; }
		
		//val=WebDriverVarReference
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//WebDriverVarReference
		public RuleCall getValWebDriverVarReferenceParserRuleCall_0_0() { return cValWebDriverVarReferenceParserRuleCall_0_0; }
		
		//'.get('
		public Keyword getGetKeyword_1() { return cGetKeyword_1; }
		
		//url=STRING
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0() { return cUrlSTRINGTerminalRuleCall_2_0; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_3() { return cRightParenthesisSemicolonKeyword_3; }
	}
	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValWebElementVarReferenceParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Keyword cContainsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamSTRINGTerminalRuleCall_2_0 = (RuleCall)cParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Contains:
		//	val=WebElementVarReference '.contains(' param=STRING ');';
		@Override public ParserRule getRule() { return rule; }
		
		//val=WebElementVarReference '.contains(' param=STRING ');'
		public Group getGroup() { return cGroup; }
		
		//val=WebElementVarReference
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//WebElementVarReference
		public RuleCall getValWebElementVarReferenceParserRuleCall_0_0() { return cValWebElementVarReferenceParserRuleCall_0_0; }
		
		//'.contains('
		public Keyword getContainsKeyword_1() { return cContainsKeyword_1; }
		
		//param=STRING
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_2_0() { return cParamSTRINGTerminalRuleCall_2_0; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_3() { return cRightParenthesisSemicolonKeyword_3; }
	}
	public class InterractionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Interractions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClickParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReadElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInsertParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCheckCheckboxParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cClearCheckboxParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSelectComboboxParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Interractions:
		//	Click | ReadElement | Insert | CheckCheckbox | ClearCheckbox | SelectCombobox;
		@Override public ParserRule getRule() { return rule; }
		
		//Click | ReadElement | Insert | CheckCheckbox | ClearCheckbox | SelectCombobox
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Click
		public RuleCall getClickParserRuleCall_0() { return cClickParserRuleCall_0; }
		
		//ReadElement
		public RuleCall getReadElementParserRuleCall_1() { return cReadElementParserRuleCall_1; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_2() { return cInsertParserRuleCall_2; }
		
		//CheckCheckbox
		public RuleCall getCheckCheckboxParserRuleCall_3() { return cCheckCheckboxParserRuleCall_3; }
		
		//ClearCheckbox
		public RuleCall getClearCheckboxParserRuleCall_4() { return cClearCheckboxParserRuleCall_4; }
		
		//SelectCombobox
		public RuleCall getSelectComboboxParserRuleCall_5() { return cSelectComboboxParserRuleCall_5; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValWebElementVarReferenceParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Keyword cClickKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Click:
		//	val=WebElementVarReference '.click();';
		@Override public ParserRule getRule() { return rule; }
		
		//val=WebElementVarReference '.click();'
		public Group getGroup() { return cGroup; }
		
		//val=WebElementVarReference
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//WebElementVarReference
		public RuleCall getValWebElementVarReferenceParserRuleCall_0_0() { return cValWebElementVarReferenceParserRuleCall_0_0; }
		
		//'.click();'
		public Keyword getClickKeyword_1() { return cClickKeyword_1; }
	}
	public class ReadElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.ReadElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefVarReferenceParserRuleCall_0_0 = (RuleCall)cRefAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValWebElementVarReferenceParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		private final Keyword cReadElementKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReadElement:
		//	ref=VarReference '=' val=WebElementVarReference '.readElement();';
		@Override public ParserRule getRule() { return rule; }
		
		//ref=VarReference '=' val=WebElementVarReference '.readElement();'
		public Group getGroup() { return cGroup; }
		
		//ref=VarReference
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//VarReference
		public RuleCall getRefVarReferenceParserRuleCall_0_0() { return cRefVarReferenceParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=WebElementVarReference
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//WebElementVarReference
		public RuleCall getValWebElementVarReferenceParserRuleCall_2_0() { return cValWebElementVarReferenceParserRuleCall_2_0; }
		
		//'.readElement();'
		public Keyword getReadElementKeyword_3() { return cReadElementKeyword_3; }
	}
	public class CheckContainsLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.CheckContainsLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValWebDriverVarReferenceParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Keyword cCheckContainsLinkByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamSTRINGTerminalRuleCall_4_0 = (RuleCall)cParamAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CheckContainsLink:
		//	val=WebDriverVarReference '.checkContainsLink(By.' name=ID '(' param=STRING ')' ');';
		@Override public ParserRule getRule() { return rule; }
		
		//val=WebDriverVarReference '.checkContainsLink(By.' name=ID '(' param=STRING ')' ');'
		public Group getGroup() { return cGroup; }
		
		//val=WebDriverVarReference
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//WebDriverVarReference
		public RuleCall getValWebDriverVarReferenceParserRuleCall_0_0() { return cValWebDriverVarReferenceParserRuleCall_0_0; }
		
		//'.checkContainsLink(By.'
		public Keyword getCheckContainsLinkByKeyword_1() { return cCheckContainsLinkByKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//param=STRING
		public Assignment getParamAssignment_4() { return cParamAssignment_4; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_4_0() { return cParamSTRINGTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_6() { return cRightParenthesisSemicolonKeyword_6; }
	}
	public class CheckContainsTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.CheckContainsText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValWebDriverVarReferenceParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Keyword cCheckContainsTextByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamSTRINGTerminalRuleCall_4_0 = (RuleCall)cParamAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CheckContainsText:
		//	val=WebDriverVarReference '.checkContainsText(By.' name=ID '(' param=STRING ')' ');';
		@Override public ParserRule getRule() { return rule; }
		
		//val=WebDriverVarReference '.checkContainsText(By.' name=ID '(' param=STRING ')' ');'
		public Group getGroup() { return cGroup; }
		
		//val=WebDriverVarReference
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//WebDriverVarReference
		public RuleCall getValWebDriverVarReferenceParserRuleCall_0_0() { return cValWebDriverVarReferenceParserRuleCall_0_0; }
		
		//'.checkContainsText(By.'
		public Keyword getCheckContainsTextByKeyword_1() { return cCheckContainsTextByKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//param=STRING
		public Assignment getParamAssignment_4() { return cParamAssignment_4; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_4_0() { return cParamSTRINGTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_6() { return cRightParenthesisSemicolonKeyword_6; }
	}
	public class FindPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.FindProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefVarReferenceParserRuleCall_0_0 = (RuleCall)cRefAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValWebDriverVarReferenceParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		private final Keyword cFindElementByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParamAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParamSTRINGTerminalRuleCall_6_0 = (RuleCall)cParamAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FindProperty:
		//	ref=VarReference '=' val=WebDriverVarReference '.findElement(By.' name=ID '(' param=STRING ')' ');';
		@Override public ParserRule getRule() { return rule; }
		
		//ref=VarReference '=' val=WebDriverVarReference '.findElement(By.' name=ID '(' param=STRING ')' ');'
		public Group getGroup() { return cGroup; }
		
		//ref=VarReference
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//VarReference
		public RuleCall getRefVarReferenceParserRuleCall_0_0() { return cRefVarReferenceParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=WebDriverVarReference
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//WebDriverVarReference
		public RuleCall getValWebDriverVarReferenceParserRuleCall_2_0() { return cValWebDriverVarReferenceParserRuleCall_2_0; }
		
		//'.findElement(By.'
		public Keyword getFindElementByKeyword_3() { return cFindElementByKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//param=STRING
		public Assignment getParamAssignment_6() { return cParamAssignment_6; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_6_0() { return cParamSTRINGTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_8() { return cRightParenthesisSemicolonKeyword_8; }
	}
	public class FindFirstPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.FindFirstProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefVarReferenceParserRuleCall_0_0 = (RuleCall)cRefAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValWebDriverVarReferenceParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		private final Keyword cFindFirstElementByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParamAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParamSTRINGTerminalRuleCall_6_0 = (RuleCall)cParamAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FindFirstProperty WebElementVarReference:
		//	ref=VarReference '=' val=WebDriverVarReference '.findFirstElement(By.' name=ID '(' param=STRING ')' ');';
		@Override public ParserRule getRule() { return rule; }
		
		//ref=VarReference '=' val=WebDriverVarReference '.findFirstElement(By.' name=ID '(' param=STRING ')' ');'
		public Group getGroup() { return cGroup; }
		
		//ref=VarReference
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//VarReference
		public RuleCall getRefVarReferenceParserRuleCall_0_0() { return cRefVarReferenceParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=WebDriverVarReference
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//WebDriverVarReference
		public RuleCall getValWebDriverVarReferenceParserRuleCall_2_0() { return cValWebDriverVarReferenceParserRuleCall_2_0; }
		
		//'.findFirstElement(By.'
		public Keyword getFindFirstElementByKeyword_3() { return cFindFirstElementByKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//param=STRING
		public Assignment getParamAssignment_6() { return cParamAssignment_6; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_6_0() { return cParamSTRINGTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_8() { return cRightParenthesisSemicolonKeyword_8; }
	}
	public class FindSecondPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.FindSecondProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefVarReferenceParserRuleCall_0_0 = (RuleCall)cRefAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValWebDriverVarReferenceParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		private final Keyword cFindSecondElementByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParamAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParamSTRINGTerminalRuleCall_6_0 = (RuleCall)cParamAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FindSecondProperty WebElementVarReference:
		//	ref=VarReference '=' val=WebDriverVarReference '.findSecondElement(By.' name=ID '(' param=STRING ')' ');';
		@Override public ParserRule getRule() { return rule; }
		
		//ref=VarReference '=' val=WebDriverVarReference '.findSecondElement(By.' name=ID '(' param=STRING ')' ');'
		public Group getGroup() { return cGroup; }
		
		//ref=VarReference
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//VarReference
		public RuleCall getRefVarReferenceParserRuleCall_0_0() { return cRefVarReferenceParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=WebDriverVarReference
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//WebDriverVarReference
		public RuleCall getValWebDriverVarReferenceParserRuleCall_2_0() { return cValWebDriverVarReferenceParserRuleCall_2_0; }
		
		//'.findSecondElement(By.'
		public Keyword getFindSecondElementByKeyword_3() { return cFindSecondElementByKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//param=STRING
		public Assignment getParamAssignment_6() { return cParamAssignment_6; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_6_0() { return cParamSTRINGTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_8() { return cRightParenthesisSemicolonKeyword_8; }
	}
	public class GetTitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.GetTitle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValWebElementVarReferenceParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Keyword cGetTitleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//GetTitle STRING:
		//	val=WebElementVarReference '.getTitle()';
		@Override public ParserRule getRule() { return rule; }
		
		//val=WebElementVarReference '.getTitle()'
		public Group getGroup() { return cGroup; }
		
		//val=WebElementVarReference
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//WebElementVarReference
		public RuleCall getValWebElementVarReferenceParserRuleCall_0_0() { return cValWebElementVarReferenceParserRuleCall_0_0; }
		
		//'.getTitle()'
		public Keyword getGetTitleKeyword_1() { return cGetTitleKeyword_1; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.Insert");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cValAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cValWebElementVarReferenceParserRuleCall_0_0_0 = (RuleCall)cValAssignment_0_0.eContents().get(0);
		private final Keyword cInsertKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cParamAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cParamSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cParamAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cRefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRefVarReferenceParserRuleCall_1_0_0 = (RuleCall)cRefAssignment_1_0.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Insert:
		//	val=WebElementVarReference '.insert(' param=STRING? | ref=VarReference? ');';
		@Override public ParserRule getRule() { return rule; }
		
		//val=WebElementVarReference '.insert(' param=STRING? | ref=VarReference? ');'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//val=WebElementVarReference '.insert(' param=STRING?
		public Group getGroup_0() { return cGroup_0; }
		
		//val=WebElementVarReference
		public Assignment getValAssignment_0_0() { return cValAssignment_0_0; }
		
		//WebElementVarReference
		public RuleCall getValWebElementVarReferenceParserRuleCall_0_0_0() { return cValWebElementVarReferenceParserRuleCall_0_0_0; }
		
		//'.insert('
		public Keyword getInsertKeyword_0_1() { return cInsertKeyword_0_1; }
		
		//param=STRING?
		public Assignment getParamAssignment_0_2() { return cParamAssignment_0_2; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_0_2_0() { return cParamSTRINGTerminalRuleCall_0_2_0; }
		
		//ref=VarReference? ');'
		public Group getGroup_1() { return cGroup_1; }
		
		//ref=VarReference?
		public Assignment getRefAssignment_1_0() { return cRefAssignment_1_0; }
		
		//VarReference
		public RuleCall getRefVarReferenceParserRuleCall_1_0_0() { return cRefVarReferenceParserRuleCall_1_0_0; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_1_1() { return cRightParenthesisSemicolonKeyword_1_1; }
	}
	public class CheckCheckboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.CheckCheckbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValWebElementVarReferenceParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Keyword cCheckKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CheckCheckbox:
		//	val=WebElementVarReference '.check();';
		@Override public ParserRule getRule() { return rule; }
		
		//val=WebElementVarReference '.check();'
		public Group getGroup() { return cGroup; }
		
		//val=WebElementVarReference
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//WebElementVarReference
		public RuleCall getValWebElementVarReferenceParserRuleCall_0_0() { return cValWebElementVarReferenceParserRuleCall_0_0; }
		
		//'.check();'
		public Keyword getCheckKeyword_1() { return cCheckKeyword_1; }
	}
	public class ClearCheckboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.ClearCheckbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValWebDriverVarReferenceParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Keyword cClearCheckBoxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ClearCheckbox:
		//	val=WebDriverVarReference '.clearCheckBox();';
		@Override public ParserRule getRule() { return rule; }
		
		//val=WebDriverVarReference '.clearCheckBox();'
		public Group getGroup() { return cGroup; }
		
		//val=WebDriverVarReference
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//WebDriverVarReference
		public RuleCall getValWebDriverVarReferenceParserRuleCall_0_0() { return cValWebDriverVarReferenceParserRuleCall_0_0; }
		
		//'.clearCheckBox();'
		public Keyword getClearCheckBoxKeyword_1() { return cClearCheckBoxKeyword_1; }
	}
	public class SelectComboboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.SelectCombobox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValWebElementVarReferenceParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Keyword cSelectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamSTRINGTerminalRuleCall_2_0 = (RuleCall)cParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SelectCombobox:
		//	val=WebElementVarReference '.select(' param=STRING ');';
		@Override public ParserRule getRule() { return rule; }
		
		//val=WebElementVarReference '.select(' param=STRING ');'
		public Group getGroup() { return cGroup; }
		
		//val=WebElementVarReference
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//WebElementVarReference
		public RuleCall getValWebElementVarReferenceParserRuleCall_0_0() { return cValWebElementVarReferenceParserRuleCall_0_0; }
		
		//'.select('
		public Keyword getSelectKeyword_1() { return cSelectKeyword_1; }
		
		//param=STRING
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_2_0() { return cParamSTRINGTerminalRuleCall_2_0; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_3() { return cRightParenthesisSemicolonKeyword_3; }
	}
	
	
	private final ProgramElements pProgram;
	private final LinesElements pLines;
	private final DeclarationElements pDeclaration;
	private final TypeElements pType;
	private final VariableElements pVariable;
	private final AffectationElements pAffectation;
	private final VarReferenceElements pVarReference;
	private final FunctionCallElements pFunctionCall;
	private final ExpressionElements pExpression;
	private final WebDriverTypeElements pWebDriverType;
	private final WebElementTypeElements pWebElementType;
	private final WebElementVarReferenceElements pWebElementVarReference;
	private final WebDriverVarReferenceElements pWebDriverVarReference;
	private final LinkElements pLink;
	private final InputElements pInput;
	private final ButtonElements pButton;
	private final TextElements pText;
	private final CheckboxElements pCheckbox;
	private final ComboboxElements pCombobox;
	private final ListValueElements pListValue;
	private final ImageElements pImage;
	private final GoElements pGo;
	private final ContainsElements pContains;
	private final InterractionsElements pInterractions;
	private final ClickElements pClick;
	private final ReadElementElements pReadElement;
	private final CheckContainsLinkElements pCheckContainsLink;
	private final CheckContainsTextElements pCheckContainsText;
	private final FindPropertyElements pFindProperty;
	private final FindFirstPropertyElements pFindFirstProperty;
	private final FindSecondPropertyElements pFindSecondProperty;
	private final GetTitleElements pGetTitle;
	private final InsertElements pInsert;
	private final CheckCheckboxElements pCheckCheckbox;
	private final ClearCheckboxElements pClearCheckbox;
	private final SelectComboboxElements pSelectCombobox;
	private final TerminalRule tPROTOCOL;
	private final TerminalRule tEXTENTION;
	private final TerminalRule tDOMAIN;
	private final TerminalRule tPATH;
	private final TerminalRule tURL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BrowserGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pLines = new LinesElements();
		this.pDeclaration = new DeclarationElements();
		this.pType = new TypeElements();
		this.pVariable = new VariableElements();
		this.pAffectation = new AffectationElements();
		this.pVarReference = new VarReferenceElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pExpression = new ExpressionElements();
		this.pWebDriverType = new WebDriverTypeElements();
		this.pWebElementType = new WebElementTypeElements();
		this.pWebElementVarReference = new WebElementVarReferenceElements();
		this.pWebDriverVarReference = new WebDriverVarReferenceElements();
		this.pLink = new LinkElements();
		this.pInput = new InputElements();
		this.pButton = new ButtonElements();
		this.pText = new TextElements();
		this.pCheckbox = new CheckboxElements();
		this.pCombobox = new ComboboxElements();
		this.pListValue = new ListValueElements();
		this.pImage = new ImageElements();
		this.pGo = new GoElements();
		this.pContains = new ContainsElements();
		this.pInterractions = new InterractionsElements();
		this.pClick = new ClickElements();
		this.pReadElement = new ReadElementElements();
		this.pCheckContainsLink = new CheckContainsLinkElements();
		this.pCheckContainsText = new CheckContainsTextElements();
		this.pFindProperty = new FindPropertyElements();
		this.pFindFirstProperty = new FindFirstPropertyElements();
		this.pFindSecondProperty = new FindSecondPropertyElements();
		this.pGetTitle = new GetTitleElements();
		this.pInsert = new InsertElements();
		this.pCheckCheckbox = new CheckCheckboxElements();
		this.pClearCheckbox = new ClearCheckboxElements();
		this.pSelectCombobox = new SelectComboboxElements();
		this.tPROTOCOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.PROTOCOL");
		this.tEXTENTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.EXTENTION");
		this.tDOMAIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.DOMAIN");
		this.tPATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.PATH");
		this.tURL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Browser.URL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.Browser".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	lines+=Lines*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Lines:
	//	Declaration | Affectation | FunctionCall | CheckContainsLink | CheckContainsText | FindProperty | FindFirstProperty |
	//	FindSecondProperty | GetTitle;
	public LinesElements getLinesAccess() {
		return pLines;
	}
	
	public ParserRule getLinesRule() {
		return getLinesAccess().getRule();
	}
	
	//Declaration:
	//	type=Type var=Variable ';';
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Type:
	//	type=('WebDriver' | 'WebElement' | 'String');
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Variable:
	//	name=ID | URL;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Affectation:
	//	ref=VarReference '=' expr=Expression ';';
	public AffectationElements getAffectationAccess() {
		return pAffectation;
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}
	
	//VarReference:
	//	val=[Variable];
	public VarReferenceElements getVarReferenceAccess() {
		return pVarReference;
	}
	
	public ParserRule getVarReferenceRule() {
		return getVarReferenceAccess().getRule();
	}
	
	//FunctionCall:
	//	Go | Contains | Interractions;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//Expression:
	//	WebDriverType | WebElementType | STRING | URL;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//WebDriverType:
	//	'FirefoxDriver' | 'ChromeDriver' | 'InternetExplorerDriver';
	public WebDriverTypeElements getWebDriverTypeAccess() {
		return pWebDriverType;
	}
	
	public ParserRule getWebDriverTypeRule() {
		return getWebDriverTypeAccess().getRule();
	}
	
	//WebElementType:
	//	Link | Input | Button | Text | Checkbox | Combobox | Image;
	public WebElementTypeElements getWebElementTypeAccess() {
		return pWebElementType;
	}
	
	public ParserRule getWebElementTypeRule() {
		return getWebElementTypeAccess().getRule();
	}
	
	//WebElementVarReference:
	//	VarReference;
	public WebElementVarReferenceElements getWebElementVarReferenceAccess() {
		return pWebElementVarReference;
	}
	
	public ParserRule getWebElementVarReferenceRule() {
		return getWebElementVarReferenceAccess().getRule();
	}
	
	//WebDriverVarReference:
	//	VarReference;
	public WebDriverVarReferenceElements getWebDriverVarReferenceAccess() {
		return pWebDriverVarReference;
	}
	
	public ParserRule getWebDriverVarReferenceRule() {
		return getWebDriverVarReferenceAccess().getRule();
	}
	
	//Link:
	//	'link' name=STRING url=STRING class=STRING;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Input:
	//	'input' name=STRING value=STRING type=STRING class=STRING;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Button:
	//	'button' name=STRING value=WebElementVarReference class=STRING;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//Text:
	//	'text' name=STRING value=WebElementVarReference class=STRING;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Checkbox:
	//	'checkbox' name=STRING value=ListValue class=STRING;
	public CheckboxElements getCheckboxAccess() {
		return pCheckbox;
	}
	
	public ParserRule getCheckboxRule() {
		return getCheckboxAccess().getRule();
	}
	
	//Combobox:
	//	'combobox' name=STRING value=ListValue class=STRING;
	public ComboboxElements getComboboxAccess() {
		return pCombobox;
	}
	
	public ParserRule getComboboxRule() {
		return getComboboxAccess().getRule();
	}
	
	//ListValue:
	//	STRING*;
	public ListValueElements getListValueAccess() {
		return pListValue;
	}
	
	public ParserRule getListValueRule() {
		return getListValueAccess().getRule();
	}
	
	//Image:
	//	'image' value=WebElementVarReference class=STRING;
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}
	
	//Go:
	//	val=WebDriverVarReference '.get(' url=STRING ');';
	public GoElements getGoAccess() {
		return pGo;
	}
	
	public ParserRule getGoRule() {
		return getGoAccess().getRule();
	}
	
	//Contains:
	//	val=WebElementVarReference '.contains(' param=STRING ');';
	public ContainsElements getContainsAccess() {
		return pContains;
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}
	
	//Interractions:
	//	Click | ReadElement | Insert | CheckCheckbox | ClearCheckbox | SelectCombobox;
	public InterractionsElements getInterractionsAccess() {
		return pInterractions;
	}
	
	public ParserRule getInterractionsRule() {
		return getInterractionsAccess().getRule();
	}
	
	//Click:
	//	val=WebElementVarReference '.click();';
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//ReadElement:
	//	ref=VarReference '=' val=WebElementVarReference '.readElement();';
	public ReadElementElements getReadElementAccess() {
		return pReadElement;
	}
	
	public ParserRule getReadElementRule() {
		return getReadElementAccess().getRule();
	}
	
	//CheckContainsLink:
	//	val=WebDriverVarReference '.checkContainsLink(By.' name=ID '(' param=STRING ')' ');';
	public CheckContainsLinkElements getCheckContainsLinkAccess() {
		return pCheckContainsLink;
	}
	
	public ParserRule getCheckContainsLinkRule() {
		return getCheckContainsLinkAccess().getRule();
	}
	
	//CheckContainsText:
	//	val=WebDriverVarReference '.checkContainsText(By.' name=ID '(' param=STRING ')' ');';
	public CheckContainsTextElements getCheckContainsTextAccess() {
		return pCheckContainsText;
	}
	
	public ParserRule getCheckContainsTextRule() {
		return getCheckContainsTextAccess().getRule();
	}
	
	//FindProperty:
	//	ref=VarReference '=' val=WebDriverVarReference '.findElement(By.' name=ID '(' param=STRING ')' ');';
	public FindPropertyElements getFindPropertyAccess() {
		return pFindProperty;
	}
	
	public ParserRule getFindPropertyRule() {
		return getFindPropertyAccess().getRule();
	}
	
	//FindFirstProperty WebElementVarReference:
	//	ref=VarReference '=' val=WebDriverVarReference '.findFirstElement(By.' name=ID '(' param=STRING ')' ');';
	public FindFirstPropertyElements getFindFirstPropertyAccess() {
		return pFindFirstProperty;
	}
	
	public ParserRule getFindFirstPropertyRule() {
		return getFindFirstPropertyAccess().getRule();
	}
	
	//FindSecondProperty WebElementVarReference:
	//	ref=VarReference '=' val=WebDriverVarReference '.findSecondElement(By.' name=ID '(' param=STRING ')' ');';
	public FindSecondPropertyElements getFindSecondPropertyAccess() {
		return pFindSecondProperty;
	}
	
	public ParserRule getFindSecondPropertyRule() {
		return getFindSecondPropertyAccess().getRule();
	}
	
	//GetTitle STRING:
	//	val=WebElementVarReference '.getTitle()';
	public GetTitleElements getGetTitleAccess() {
		return pGetTitle;
	}
	
	public ParserRule getGetTitleRule() {
		return getGetTitleAccess().getRule();
	}
	
	//Insert:
	//	val=WebElementVarReference '.insert(' param=STRING? | ref=VarReference? ');';
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//CheckCheckbox:
	//	val=WebElementVarReference '.check();';
	public CheckCheckboxElements getCheckCheckboxAccess() {
		return pCheckCheckbox;
	}
	
	public ParserRule getCheckCheckboxRule() {
		return getCheckCheckboxAccess().getRule();
	}
	
	//ClearCheckbox:
	//	val=WebDriverVarReference '.clearCheckBox();';
	public ClearCheckboxElements getClearCheckboxAccess() {
		return pClearCheckbox;
	}
	
	public ParserRule getClearCheckboxRule() {
		return getClearCheckboxAccess().getRule();
	}
	
	//SelectCombobox:
	//	val=WebElementVarReference '.select(' param=STRING ');';
	public SelectComboboxElements getSelectComboboxAccess() {
		return pSelectCombobox;
	}
	
	public ParserRule getSelectComboboxRule() {
		return getSelectComboboxAccess().getRule();
	}
	
	//terminal PROTOCOL:
	//	('http' | 'https') '://';
	public TerminalRule getPROTOCOLRule() {
		return tPROTOCOL;
	}
	
	//terminal EXTENTION:
	//	'fr' | 'com';
	public TerminalRule getEXTENTIONRule() {
		return tEXTENTION;
	}
	
	//terminal DOMAIN:
	//	STRING ('.' STRING)* '.' EXTENTION;
	public TerminalRule getDOMAINRule() {
		return tDOMAIN;
	}
	
	//terminal PATH:
	//	'/' | '/' STRING*;
	public TerminalRule getPATHRule() {
		return tPATH;
	}
	
	//terminal URL:
	//	PROTOCOL DOMAIN PATH;
	public TerminalRule getURLRule() {
		return tURL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
