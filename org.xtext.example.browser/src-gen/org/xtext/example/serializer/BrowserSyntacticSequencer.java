/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.services.BrowserGrammarAccess;

@SuppressWarnings("all")
public class BrowserSyntacticSequencer extends AbstractSyntacticSequencer {

	protected BrowserGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Expression_STRINGTerminalRuleCall_2_or_URLTerminalRuleCall_3_or_WebDriverTypeParserRuleCall_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (BrowserGrammarAccess) access;
		match_Expression_STRINGTerminalRuleCall_2_or_URLTerminalRuleCall_3_or_WebDriverTypeParserRuleCall_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getSTRINGTerminalRuleCall_2()), new TokenAlias(false, false, grammarAccess.getExpressionAccess().getURLTerminalRuleCall_3()), new TokenAlias(false, false, grammarAccess.getExpressionAccess().getWebDriverTypeParserRuleCall_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getURLRule())
			return getURLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWebDriverTypeRule())
			return getWebDriverTypeToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal STRING:
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * terminal URL:
	 * 	PROTOCOL DOMAIN PATH
	 * ;
	 */
	protected String getURLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "http://\"\".fr/";
	}
	
	/**
	 * WebDriverType:
	 * 	'FirefoxDriver' | 'ChromeDriver' | 'InternetExplorerDriver'
	 * ;
	 */
	protected String getWebDriverTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "FirefoxDriver";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Expression_STRINGTerminalRuleCall_2_or_URLTerminalRuleCall_3_or_WebDriverTypeParserRuleCall_0.equals(syntax))
				emit_Expression_STRINGTerminalRuleCall_2_or_URLTerminalRuleCall_3_or_WebDriverTypeParserRuleCall_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     WebDriverType | STRING | URL
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Expression_STRINGTerminalRuleCall_2_or_URLTerminalRuleCall_3_or_WebDriverTypeParserRuleCall_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
